---
- hosts: cluster
  become: yes
  vars:
      join_command_location: "./join_command.out"

  tasks:
    - name: Set iptables to legacy
      shell: "update-alternatives --set iptables /usr/sbin/iptables-legacy"

    - name: Set iptables6 to legacy
      shell: "update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy"

    - name: Update cache to make sure everything is fresh
      apt:
        update_cache: yes

    - name: turn off the swap file
      systemd:
        name: dphys-swapfile
        enabled: no
        masked: yes

    - name: Remove swapfile package
      apt:
        name: ['dphys-swapfile']
        state: absent
      register: swap

    # Reboot nodes for swap changes to take effect
    - block:
        - name: Reboot the worker nodes if swap was removed.
          shell: "reboot"
          ignore_errors: True
          when: "'worker' in group_names"

        - name: Reboot the master node if swap was removed.
          shell: "reboot"
          ignore_errors: True
          when: "'master' in group_names"
      when: swap.changed

    - name: Check to see if Docker is already installed
      shell: dpkg-query -W 'docker'
      ignore_errors: True
      register: is_docker

    # Docker install. Skip if already installed
    - block:
        - name: install latest docker.io
          apt:
            name: ['docker.io']
            state: present

        - name: Create docker daemon file
          blockinfile:
            dest: /etc/docker/daemon.json
            block: |
                   {
                     "exec-opts": ["native.cgroupdriver=systemd"],
                     "log-driver": "json-file",
                     "log-opts": {
                       "max-size": "100m"
                     },
                     "storage-driver": "overlay2"
                   }
            create: yes
            marker: ""
          ignore_errors: True

        - name: Make docker.service.d directory
          shell: "mkdir -p /etc/systemd/system/docker.service.d"

        - name: restart docker
          systemd:
            state: restarted
            daemon_reload: yes
            name: docker

        - name: hold docker.io so it's not upgraded
          shell: "apt-mark hold docker.io"

        - name: Append picocluster to docker Group
          user:
            name: picocluster
            groups: docker
            append: yes
          register: group
      when: is_docker is failed

    - name: Enable docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Make docker use systemd for cgroup management
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2",
            "default-runtime": "nvidia",
            "runtimes": {
              "nvidia": {
                "path": "nvidia-container-runtime",
                "runtimeArgs": []
              }
            }
          }
        dest: /etc/docker/daemon.json
  
    - name: Restart systemd to see new config file
      shell: systemctl daemon-reload
  
    - name: Restart docker with new config file
      shell: systemctl restart docker
  
    - name: Check to see if Kubernetes is already installed
      shell: dpkg-query -W 'kubeadm'
      ignore_errors: True
      register: is_kubernetes

    # Kubernetes install. Skip if already installed
    - block:
        - name: Install Kubernetes repository key
          shell: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"

        - name: Add Kubernetes source for apt
          lineinfile:
            dest: /etc/apt/sources.list.d/kubernetes.list
            line: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            create: yes

        - name: Update cache to get kubernetes
          apt:
            update_cache: yes

        - name: Install Kubernetes
          apt:
            name: ['kubeadm=1.15.5-00', 'kubectl=1.15.5-00', 'kubelet=1.15.5-00', 'kubernetes-cni=0.7.5-00']
            state: present

        - name: hold kubelet kubeadm kubectl so they are not upgraded
          shell: "apt-mark hold kubelet kubeadm kubectl"
          register: kubernetes_install

      
      when: is_kubernetes is failed

    - block:
        # Create Kubernetes cluster and save join command to file
        - block:
            - name: Init kubernetes
              command: "kubeadm init --ignore-preflight-errors Swap --pod-network-cidr 10.244.0.0/16"
              register: kube_init

            - name: Extract join command
              shell: kubeadm token create --print-join-command
              register: join_command

            - name: Save join command
              become: no
              local_action: copy content="{{ join_command.stdout_lines | last  | trim }} --ignore-preflight-errors Swap" dest="{{ join_command_location }}"

            - name: Copy join command to worker nodes
              synchronize:
                src: "{{ join_command_location }}"
                dest: "{{ join_command_location }}"
          when: "'master' in group_names"

        # Some additional setup for the control user on master
        - block:
            - name: Remove .kube directory if it exists
              file:
                path: "$HOME/.kube"
                state: absent

            - name: Copy kube admin config to user
              shell: "mkdir -p $HOME/.kube"

            - shell: "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"

            - shell: "sudo chown $(id -u):$(id -g) $HOME/.kube/config"

            - name: Pass IPv4 traffic iptables' chain
              become: yes
              shell: "sysctl net.bridge.bridge-nf-call-iptables=1"

            - name: Set up flannel networking
              shell: "curl -sSL https://rawgit.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml | kubectl create -f -"
              ignore_errors: True

          become: no
          when: "'master' in group_names"

        # Read the join command on the workers and join the cluster
        - block:
            - name: Read join command on worker nodes
              debug: msg="{{ lookup('file', join_command_location) }}"
              register: join_command_local
              when: "'worker' in group_names"

            - name: Join Workers to cluster
              command: "{{ join_command_local.msg }}"
              when: "'worker' in group_names"
          when: (kube_init is success) and (join_command is defined)

      when: (is_kubernetes is success) or (kubernetes_install is success)


    # Wait a few seconds, then print the output of the Kubernetes cluster status. All nodes should have joined.
    - block:
        - name: Wait 60 seconds for Kubernetes to stabilize
          wait_for: 
            timeout: 60

        - name: Retrieve the  cluster status and show it
          shell: kubectl get nodes
          register: kubernetes_status
          become: no

        - debug: var=kubernetes_status.stdout_lines
      when: "'master' in group_names"

    # Collect the info for gitlab integration
    - block:
        - name: Create gitlab admin service account
          become: no
          shell:
            cmd: kubectl apply -f gitlab-admin-service-account.yaml

        - name: Get k8s API URL
          become: no
          shell: kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}'
          register: kubernetes_url

        - name: Get k8s CA cert
          shell: kubectl get secret $(kubectl get secrets | grep 'default-token' | cut -d ' ' -f 1) -o jsonpath="{['data']['ca\.crt']}" | base64 --decode
          register: kubernetes_ca_cert
          become: no

        - name: Get k8s gitlab-admin token
          shell: kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}')
          register: kubernetes_admin_token
          become: no

        - debug: var=kubernetes_url.stdout_lines
        - debug: var=kubernetes_ca_cert.stdout_lines
        - debug: var=kubernetes_admin_token.stdout_lines

      when: "'master' in group_names"

    # Install helm manually since gitlab has a bug for arm64 clusters for now
    - block:
        - name: Download install-helm.sh autoinstaller for Helm 2.x
          become: no
          get_url:
            # switch from 2.x to 3.x
            #url: https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get
            #dest: /home/picocluster/install-helm.sh
            url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            dest: /home/picocluster/get_helm.sh
            mode: '0700'

        - name: Run install-helm.sh
          become: no
          shell:
            chdir: /home/picocluster
            # switch from 2.x to 3.x
            #cmd: ./install-helm.sh
            cmd: ./get_helm.sh

        # helm init not needed in 3.x
        #- name: Install helm tiller
        #  become: no
        #  cmd: helm init

      when: "'master' in group_names"
